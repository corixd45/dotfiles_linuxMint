# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

source ~/.myscripts/fancy-bash.sh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# Aliases, functions and commands I use ------------------------------------------------------------
alias dotfiles="cd ~/code/dotfiles_linuxMint/"
alias ssy="cd ~/code/tecnoap/projects-ssy/ssy"

alias open="xdg-open 2>/dev/null"         # open any file

alias dusingle="sudo du -sh"              # size of directory
alias duall="sudo du -hd 1 . | sort -h"   # size of subdirectories (1st level)

alias calculator="gcalccmd"

alias battery="sudo tlp-stat -b"
alias fullcharge="sudo tlp fullcharge"

alias mic2speaker-on="pactl load-module module-loopback latency_msec=1"
alias mic2speaker-off="pactl unload-module module-loopback"

alias cp="cp -riv"                                           # verbose
alias mkdir="mkdir -pv"                                      # parent, verbose
alias rm="rm -i"

# -A almost all, -o list without group ingo, -F classify, 
# -h human readable
# https://unix.stackexchange.com/questions/205158/how-to-show-only-the-last-k-columns-in-ls-l

list_message() {
  GREEN='\033[0;32m'                                    # ANSI code
  NC='\033[0m'                                          # ANSI No Color
  MESSAGE=$1
  printf "${GREEN}${MESSAGE}${NC}\n"
}

l () {  # arg1: path, arg2: s (sort by size)
  list_message "LISTING NO HIDDEN, NO SYMLINKS"
  ls -lgoLFh${2^^} --group-directories-first --color=always "${1:-.}" | sed 's/^[^ ][^ ]*  *[^ ][^ ]* //'
}

ll () {
  list_message "LISTING HIDDEN, NO SYMLINKS"
  ls -AlgoLFh${2^^} --group-directories-first --color=always "${1:-.}" | sed 's/^[^ ][^ ]*  *[^ ][^ ]* //'
}

L () {
  list_message "LISTING NO HIDDEN, SYMLINKS"
  ls -lgoFh${2^^} --group-directories-first --color=always "${1:-.}" | sed 's/^[^ ][^ ]*  *[^ ][^ ]* //'
}

LL () {
  list_message "LISTING HIDDEN, SYMLINKS"
  ls -AlgoFh${2^^} --group-directories-first --color=always "${1:-.}" | sed 's/^[^ ][^ ]*  *[^ ][^ ]* //'
}

# find symlinks in current pointing to given directory
function findln() {
  find . -type l -exec readlink -nf {} ';' -exec echo " -> {}" ';' | grep "$*"
}

# find broken symlinks in current directory
alias brokenln="find . -type l -exec test ! -e {} \; -print"

# Check shutdown status
function shutdown-show() {
  if [ -f /run/systemd/shutdown/scheduled ]; then
      SHUTTIME=$(cat /run/systemd/shutdown/scheduled | grep "USEC" | cut -d '=' -f 2 | cut -c -10)
      echo "Shutdown scheduled for $(date -d @$SHUTTIME), use 'shutdown -c' to cancel."
  fi
}

function wakeup() {
  OPTIND=1                                  # Reset getops
  while getopts "acsd" opt; do
    case $opt in
        a) 
            ALARM=`cat /sys/class/rtc/rtc0/wakealarm`
            if [ $ALARM ]; then
                echo "Wakeup scheduled for $(date -d @$ALARM), use 'wakeup -c' to cancel."
            fi
            ;;
        c) 
            sudo sh -c "echo 0 > /sys/class/rtc/rtc0/wakealarm"            # Clear alarm
            echo -e "Wakeup canceled"
            ;;
        s)  
            HOUR=$2                                       # HHMM
            DAY_DELAY=$3                                  
            
            # Set date and time for wakeup alarm
            DATE=$(date -d "+$DAY_DELAY day" +"%Y%m%d")   # Tomorrow, YYYMMDD
            WAKETIME=$(date -d "$DATE $HOUR" +%s)         # Convert to epoch

            sudo sh -c "echo 0 > /sys/class/rtc/rtc0/wakealarm"            # Clear alarm
            sudo sh -c "echo $WAKETIME > /sys/class/rtc/rtc0/wakealarm"    # Set alarm 
            ;;
    esac
  done
  unset ALARM HOUR DAY_DELAY DATE WAKETIME
}

# ----------- GIT ALIASES AND FUNCTIONS ----------------------------------------------------------------------

# Git status of current repo, submodules and tree.
alias gstatus="git fetch && git status"
alias gsubmodules="git submodule foreach 'git status'"
alias grepos="~/code/dotfiles_linuxMint/scripts/git-check-repos/git-status"

alias gadd="git add"
alias gapatch="git add --patch"
alias gcopatch="git checkout --patch"

alias gdiff="git diff --color"
alias gtree="git diff-tree -p"    # diff of commit, gtree COMMITHASH
alias gstaged="git diff --no-ext-diff --staged"
alias gmerge="git merge --no-commit --no-ff"    # gmerge BRANCH_NAME

# From https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-log.html
alias glog="git log --graph --pretty=format:'%C(yellow)%h %C(red)%aD %C(cyan)%an%C(green)%d %Creset%s'"
alias glogr="git log --graph --pretty=format:'%C(yellow)%h %C(red)%ar %C(cyan)%an%C(green)%d %Creset%s'"
alias gloga="git log --graph --all --pretty=format:'%C(yellow)%h %C(red)%aD %C(cyan)%an%C(green)%d %Creset%s'"
alias gfollow="git log --follow --graph --pretty=format:'%C(yellow)%h %C(red)%aD %C(cyan)%an%C(green)%d %Creset%s' -- "   # gfollow file
alias guser="git config user.name; git config user.email"               # user on current dir

alias gcommit="git commit -m"                                           # gcommit "message"
alias gamend="git commit --amend --no-edit"

alias glist-tracked="git ls-tree -r --abbrev=8 --name-only $(git branch --show-current)"    # list tracked files
alias glist-untracked="git ls-files --others --exclude-standard"    # list untracked files
alias gignoreall="git ls-files --others --exclude-standard >> .gitignore"           # ignore files currently untracked
alias gclean-untracked="git clean -i"                       # delete files currently untracked
alias gclean-ignored="git clean --exclude=.gitignore -xdi"  # -x files in .gitignore, -d recursive, -i interactive

# Ignore and revert ignorance of changed files (temporary)
# https://stackoverflow.com/a/23259612
alias gignore="git update-index --assume-unchanged"                       # gignore filename
alias gignored="git ls-files -v | grep ^[a-z]"                            # list temporarily ignored files
alias gtrack="git update-index --no-assume-unchanged"                     # gtrack filename

alias gmode="git config core.fileMode"                    # Track (true) or ignore (false) file mode changes

alias gslist="git stash list"

function gspush() {
  git stash push -m "$*" -p       # $* name of stash
}

function gsapply() {
  git stash apply $(git stash list | grep "$*" | cut -d: -f1)   # $* name of stash
}

function gsshow() {
  git stash show -p $(git stash list | grep "$*" | cut -d: -f1)   # $* name of stash
}

function gdiff-reorder() {
  # git diff ignoring order of lines.
  trap '' INT     # catch ctrl+c to successfully delete temp files
  sort $1 > tmp-a
  sort $2 > tmp-b
  gdiff --no-index tmp-a tmp-b
  rm tmp-a tmp-b
}

# -----------------------------------------------------------------------------------------------------------

# Set title to new terminals (windows/tabs)
# https://askubuntu.com/a/886695
function set-title(){
  if [[ -z "$ORIG" ]]; then
    ORIG="$PS1"
  fi
  TITLE="\[\e]2;$*\a\]"
  PS1="${ORIG}${TITLE}"
}
# Title: '(FirstFolderInPath) LastFolderInPath
set-title $(echo "(")$(echo "$PWD" | cut -d/ -f 2-2)$(echo ") ${PWD##*/}")

# Disable "alt + numkeys" bindings
for i in "-" {0..9}; do bind -r "\e$i"; done

# Disable default command of ctrl+z
stty susp ^-